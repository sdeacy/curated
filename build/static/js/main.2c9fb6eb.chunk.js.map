{"version":3,"sources":["logo.svg","components/Film/Film.js","components/Films/Films.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Film","_this$props","this","props","title","meterScore","plot","url","critic_consensus","Poster","Awards","Country","Votes","Language","imdbVotes","imdbScore","Metascore","react_default","a","createElement","src","alt","className","href","Component","Films","console","log","filmlist","filteredList","filter","film","Response","genres","map","Genre","index","components_Film_Film","key","Title","Plot","Ratings","Value","App","components_Films_Films","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"62kaAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2MC+BzBC,4MA3BH,IAAAC,EAMRC,KAAKC,MALMC,EADHH,EACGG,MAAMC,EADTJ,EACSI,WAAYC,EADrBL,EACqBK,KAAuBC,GAD5CN,EAC2BO,iBAD3BP,EAC4CM,KAAKE,EADjDR,EACiDQ,OAAQC,EADzDT,EACyDS,OAC7DC,GAFIV,EACgEW,MADhEX,EAEJU,SACJE,EAHQZ,EAGRY,SACJC,EAJYb,EAIZa,UACAC,EALYd,EAKZc,UAAWC,EALCf,EAKDe,UAGH,OACIC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKX,EAAQY,IAAI,KACtBJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGI,KAAMhB,GAAMH,GAAnB,KACAa,EAAAC,EAAAC,cAAA,kCAA0Bd,GAC1BY,EAAAC,EAAAC,cAAA,yBAAiBJ,GACjBE,EAAAC,EAAAC,cAAA,wBAAgBH,GAChBC,EAAAC,EAAAC,cAAA,oBAAYL,GACZG,EAAAC,EAAAC,cAAA,qBAAaT,GACbO,EAAAC,EAAAC,cAAA,sBAAcR,GACdM,EAAAC,EAAAC,cAAA,uBAAeN,GACfI,EAAAC,EAAAC,cAAA,KAAGG,UAAU,cAAchB,YArB5BkB,qBCmCJC,mLA/BPC,QAAQC,IAAIC,EAAS,IACrB,IAAMC,EAAeD,EAASE,OAAQ,SAAAC,GAAI,MAAuB,SAAlBA,EAAKC,WAC9CC,EAASL,EAASM,IAAI,SAAAH,GAAI,OAAKA,EAAKI,QAG1C,OAFAT,QAAQC,IAAIM,GACZP,QAAQC,IAAIE,GAERZ,EAAAC,EAAAC,cAAA,UACKU,EACAK,IAAK,SAACH,EAAMK,GAAP,OAEFnB,EAAAC,EAAAC,cAACkB,EAAD,CACAC,IAAKF,EACLhC,MAAO2B,EAAKQ,MACZ/B,iBAAkBuB,EAAKvB,iBACvBF,KAAMyB,EAAKS,KACXzB,UAAWgB,EAAKU,SAAWV,EAAKU,QAAQ,IAAMV,EAAKU,QAAQ,GAAGC,MAC9DrC,WAAY0B,EAAKU,SAAWV,EAAKU,QAAQ,IAAMV,EAAKU,QAAQ,GAAGC,MAC/D1B,UAAWe,EAAKU,SAAWV,EAAKU,QAAQ,IAAMV,EAAKU,QAAQ,GAAGC,MAC9D5B,UAAWiB,EAAKjB,UAChBP,IAAKwB,EAAKxB,IACVE,OAAQsB,EAAKtB,OACbC,OAAQqB,EAAKrB,OACbC,QAASoB,EAAKpB,QACdE,SAAUkB,EAAKlB,qBAzBfW,aCwBLmB,mLAtBX,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAebL,EAAAC,EAAAC,cAACyB,EAAD,cAlBUpB,aCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2c9fb6eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component} from 'react';\nimport \"./film.css\"\n\nclass Film extends Component {\n    render(){\n        const {title,meterScore, plot, critic_consensus,url, Poster, Awards,Votes,\n        Country,\n    Language,\nimdbVotes,\nimdbScore, Metascore\n} = this.props;\n        // console.log(title)\n        return(\n            <li>\n                <img src={Poster} alt=\"\"/>\n                <div className='film__info'>\n                    <h3><a href={url}>{title}</a> </h3>\n                    <h4>Rotten Tomato Score: {meterScore}</h4>\n                    <h4>IMDB Score: {imdbScore}</h4>\n                    <h4>Metascore: {Metascore}</h4>\n                    <h4>Votes: {imdbVotes}</h4>\n                    <h4>Awards: {Awards}</h4>\n                    <h4>Country: {Country}</h4>\n                    <h4>Language: {Language}</h4>\n                    <p className='film__plot'>{plot}</p>\n                </div>\n            </li>\n        )\n    }\n}\n\nexport default Film;","import React, { Component} from 'react';\nimport \"./films.css\"\nimport Film from '../Film/Film';\nimport filmlist from '../../data/imdb_films'\n\nclass Films extends Component {\n    render(){\n        console.log(filmlist[0])\n        const filteredList = filmlist.filter( film => (film.Response === \"True\"));\n        const genres = filmlist.map(film => (film.Genre))\n        console.log(genres)\n        console.log(filteredList)\n        return(\n            <ul>\n                {filteredList\n                .map( (film, index) => (\n\n                    <Film \n                    key={index}\n                    title={film.Title}\n                    critic_consensus={film.critic_consensus}\n                    plot={film.Plot}\n                    imdbScore={film.Ratings && film.Ratings[0] && film.Ratings[0].Value}\n                    meterScore={film.Ratings && film.Ratings[1] && film.Ratings[1].Value}\n                    Metascore={film.Ratings && film.Ratings[2] && film.Ratings[2].Value}\n                    imdbVotes={film.imdbVotes}\n                    url={film.url}\n                    Poster={film.Poster}\n                    Awards={film.Awards}\n                    Country={film.Country}\n                    Language={film.Language}\n                    />\n                ))}\n            </ul>\n        )\n    }\n}\n\nexport default Films;\n\n// Ratings: Array(3)\n// 0:\n// Source: \"Internet Movie Database\"\n// Value: \"7.3/10\"\n// __proto__: Object\n// 1:\n// Source: \"Rotten Tomatoes\"\n// Value: \"97%\"\n// __proto__: Object\n// 2:\n// Source: \"Metacritic\"\n// Value: \"89/100\"\n\n\n// Actors: \"Marion Cotillard, Fabrizio Rongione, Catherine Salée, Baptiste Sornin\"\n// Awards: \"Nominated for 1 Oscar. Another 40 wins & 73 nominations.\"\n// BoxOffice: \"N/A\"\n// Country: \"Belgium, France, Italy\"\n// DVD: \"25 Aug 2015\"\n// Director: \"Jean-Pierre Dardenne, Luc Dardenne\"\n// Genre: \"Drama\"\n// Language: \"French, Arabic, English\"\n// Metascore: \"89\"\n// Plot: \"Liège, Belgium. Sandra is a factory worker who discovers that her workmates have opted for a EUR1,000 bonus in exchange for her dismissal. She has only a weekend to convince her colleagues to give up their bonuses in order to keep her job.\"\n// Poster: \"https://m.media-amazon.com/images/M/MV5BMjIyMzczMDI0NF5BMl5BanBnXkFtZTgwNjI5Nzk3MTE@._V1_SX300.jpg\"\n// Production: \"IFC Films\"\n// Rated: \"PG-13\"\n// Ratings: (3) [{…}, {…}, {…}]\n// Released: \"21 May 2014\"\n// Response: \"True\"\n// Runtime: \"95 min\"\n// Title: \"Two Days, One Night\"\n// Type: \"movie\"\n// Website: \"http://www.ifcfilms.com/films/two-days-one-night\"\n// Writer: \"Jean-Pierre Dardenne, Luc Dardenne\"\n// Year: \"2014\"\n// imdbID: \"tt2737050\"\n// imdbRating: \"7.3\"\n// imdbVotes: \"40,667\"\n// __proto__: Object","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Films from './components/Films/Films';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header> */}\n        <Films />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// 1. get list of films on netflix ireland\n// 2. get info from rt for each film\n//  2a. if above a certain score then add to a list\n// 3. get info from imdb\n// 4. show the list\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}